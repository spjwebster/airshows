<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:dfc="com.dynamicflash.controls.*" 
	xmlns:asc="com.dynamicflash.airshows.components.*"
	layout="absolute" title="AirShows" creationComplete="init()" xmlns:components="com.dynamicflash.airshows.components.*" horizontalScrollPolicy="off" verticalScrollPolicy="off">
	<mx:Script>
		<![CDATA[
			import com.dynamicflash.airshows.events.SubscriptionEvent;
            import mx.effects.easing.Quadratic;
		]]>
	</mx:Script>
	<mx:Script>
		<![CDATA[
			import com.dynamicflash.airshows.events.SubscriptionEvent;
		]]>
	</mx:Script>
	<mx:Style>
		WindowedApplication {
			padding-top: 0;
			padding-right: 0;
			padding-bottom: 0;
			padding-left: 0;
			vertical-gap: 0
		}
	</mx:Style>
	<mx:states>
		<mx:State name="subscription">
			<mx:SetProperty target="{container}" name="x" value="{ 0 - this.width }"/>
		</mx:State>
	</mx:states>
	
	<mx:transitions>
		<mx:Transition fromState="*" toState="subscription">
			<mx:Parallel target="{container}">
				<mx:Move duration="400" easingFunction="Quadratic.easeInOut"/>
			</mx:Parallel>
		</mx:Transition>
		<mx:Transition fromState="subscription" toState="*">
			<mx:Parallel target="{container}">
				<mx:Move duration="400" easingFunction="Quadratic.easeInOut"/>
			</mx:Parallel>
		</mx:Transition>
	</mx:transitions>
	
	<mx:HBox id="container" width="200%" height="100%" horizontalScrollPolicy="off" horizontalGap="0">
		<mx:VBox id="main" width="{this.width}" height="100%" verticalGap="0">
			<mx:ControlBar width="100%">
				<mx:TextInput id="filterInput" text="" change="onFilterInputChange( event )"/>
				<mx:Image source="@Embed('../assets/cancel.png')" click="filterInput.text = ''; shows.refresh();" visible="{filterInput.text.length > 0}"/>
				<mx:Spacer width="100%"/>
				<mx:Button icon="@Embed('../assets/arrow_refresh.png')" click="refreshShows()"/>
			</mx:ControlBar>
			<dfc:AdvancedDataGrid id="showsGrid" width="100%" height="100%" dataProvider="{shows}" verticalGridLines="false" sortableColumns="false" rowColorFunction="getShowsGridRowColor">
				<dfc:columns>
					<mx:DataGridColumn headerText="Show" dataField="title" width="250"/>
					<mx:DataGridColumn headerText="Last seen episode" labelFunction="renderShowsGridEpisodeLabel"/>
				</dfc:columns>
			</dfc:AdvancedDataGrid>			
		</mx:VBox>
		<asc:SubscriptionOptions id="subscriptions" width="{this.width}" height="100%"/>
	</mx:HBox>
	
	<mx:Script>
		<![CDATA[
			import mx.events.ListEvent;
			import mx.controls.Button;
			import mx.collections.SortField;
			import mx.collections.Sort;
			import com.dynamicflash.filesystem.INIFile;
			import mx.collections.ArrayCollection;
			import mx.rpc.http.HTTPService;
			
			[Bindable]
			private var shows:ArrayCollection = new ArrayCollection();
			
			private var db:SQLConnection;
			private var iniFile:INIFile;
			
			private function init():void {
				this.shows = new ArrayCollection();
				this.shows.filterFunction = showsGridFilter;
				
				this.shows.sort = new Sort();
				this.shows.sort.fields = [ new SortField( 'subscribed', false, true ), new SortField( 'title', true ) ];
				
				this.showsGrid.addEventListener( ListEvent.ITEM_CLICK, onShowsGridItemClick );
				
				this.addEventListener( KeyboardEvent.KEY_UP, onKeyUp );
				
				loadSubscriptions();
				loadShows();
			}
			
			private function onKeyUp( event:KeyboardEvent ):void {
				trace( event.keyCode );
				if ( event.keyCode === Keyboard.ESCAPE ) {
					this.currentState = "";
				}
			}
			
			private function onShowsGridItemClick( event:ListEvent ):void {
				var show:Object = this.shows.getItemAt( event.rowIndex );
				if ( show ) {
					this.subscriptions.load( show );
					this.title = show.title;
					this.currentState = "subscription";
				}				
			}
			
			private function loadSubscriptions():void {
				this.iniFile = new INIFile();
				iniFile.load( File.userDirectory.resolvePath( ".pytvshows.cfg" ) );
			}
			
			private function getShowsGridRowColor( show:Object, color:Number ):Number {
				return show.subscribed ? 0xA9BD63 : color;
			}
			
			private function renderShowsGridEpisodeLabel( show:Object, column:DataGridColumn ):String {
				var label:String = "";
				
				if ( show.subscribed ) {
					label = "Season " + show.lastSeason + ", Ep " + show.lastEpisode;
				}
				
				return label;
			}
			
			// Load shows listing from sqlite cache
			private function loadShows():void {
				var file:File = File.applicationStorageDirectory.resolvePath( "shows.db" );
				this.db = new SQLConnection();
				try {
					this.db.open( file );
				} catch ( error:SQLError ) {
				    trace("Error message:", error.message);
				    trace("Details:", error.details);					
				}
				
				// Attempt to create table if it doesn't exist
				// TODO: Only do this once on application start-up
				var createStatement:SQLStatement = new SQLStatement();
				createStatement.sqlConnection = this.db;
				createStatement.text = "" +  
					"CREATE TABLE IF NOT EXISTS shows (" +
						"id VARCHAR(255) PRIMARY KEY," +
						"title VARCHAR(255)" +
					")";
				createStatement.execute();
				
				// Fetch data
				var selectStatement:SQLStatement = new SQLStatement();
				selectStatement.sqlConnection = this.db;
				selectStatement.text = "SELECT * FROM shows;";
				selectStatement.execute();
				
				this.shows.removeAll();
				
				var dataSource:Array = selectStatement.getResult().data;
				for each ( var show:Object in dataSource ) {
					show.subscribed = this.iniFile.sections.hasOwnProperty( show.id );
					if ( show.subscribed ) {
						show.lastSeason = this.iniFile.sections[ show.id ][ 'season' ];
						show.lastEpisode = this.iniFile.sections[ show.id ][ 'episode' ];
					}
				}

				this.shows.source = dataSource;
			}
			
			private function onSubscriptionLoadComplete( event:Event ):void {
				var stream:FileStream = FileStream( event.target );
				stream.close();
			}
			
			// Repopulate shows data cache from tvrss.net
			private function refreshShows():void {
				var req:URLRequest = new URLRequest( 'http://tvrss.net/shows/' );
				var loader:URLLoader = new URLLoader();
				loader.addEventListener( Event.COMPLETE, onShowsLoaderComplete );
				loader.load( req );
			}
			
			private function onShowsLoaderComplete( event:Event ):void {
				var loader:URLLoader = URLLoader( event.target );
				var showRegExp:RegExp = new RegExp( '<a href="http://tvrss.net/search/\\?show_name=(.*?)&amp;show_name_exact=true">([^<]+)</a>', 'g' );
				
				var dataSource:Array = new Array();
				
				// Prepare SQL statement to insert/replace show into sqlite cache
				var insertStatement:SQLStatement = new SQLStatement();
				insertStatement.sqlConnection = this.db;
				insertStatement.text = "REPLACE INTO shows ( id, title ) VALUES ( :id, :title )";
				
				// Begin sqlite transaction
				this.db.begin();
				
				var matches:Object;
				while( matches = showRegExp.exec( loader.data ) ) {
					// Extract fields from regex
					var show:Object = new Object();
					show.id = matches[1];
					show.title = matches[2];
					show.subscribed = this.iniFile.sections.hasOwnProperty( show.id );

					if ( show.subscribed ) {
						show.lastSeason = this.iniFile.sections[ show.id ][ 'season' ];
						show.lastEpisode = this.iniFile.sections[ show.id ][ 'episode' ];
					}
					
					dataSource.push( show );
					
					// Insert show into sqlite cache
					// TODO: Try asynchronous writes to avoid application hanging
					insertStatement.parameters[ ':id' ] = show.id;
					insertStatement.parameters[ ':title' ] = show.title;
					insertStatement.execute();
				}
				
				// End sqlite transaction
				this.db.commit();
				
				// Update grid data source
				this.shows.source = dataSource;	
			}
			
			private function showsGridFilter( item:Object ):Boolean {
				return item.title.toLowerCase().indexOf( filterInput.text.toLowerCase() ) !== -1;
			}
			
			private function onFilterInputChange( event:Event ):void {
				shows.refresh();
			}
			
		]]>
	</mx:Script>
</mx:WindowedApplication>